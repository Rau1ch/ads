#include <iostream>
#include <string>
#include <queue>
#include <vector>
#include <iomanip>

using namespace std;

class Customer {
public:
    string name;
    Customer(string name) : name(name) {}
};

class Restaurant {
public:
    string name;
    Restaurant(string name) : name(name) {}
};

class Order {
public:
    int orderId;
    Customer customer;
    Restaurant restaurant;
    string foodItem;
    int deliveryTime;
    
    Order(int id, Customer customer, Restaurant restaurant, string food, int time)
        : orderId(id), customer(customer), restaurant(restaurant), foodItem(food), deliveryTime(time) {}
    
    bool operator<(const Order& other) const {
        return deliveryTime > other.deliveryTime;
    }
};

class OrderManager {
private:
    queue<Order> orderQueue;
    priority_queue<Order> deliveryQueue;
    int nextOrderId;
    
public:
    OrderManager() : nextOrderId(1) {}
    
    void placeOrder(Customer customer, Restaurant restaurant, string foodItem, int deliveryTime) {
        if (deliveryTime <= 0) {
            cout << "Error: Delivery time must be greater than 0 minutes.\n";
            return;
        }
        Order newOrder(nextOrderId++, customer, restaurant, foodItem, deliveryTime);
        orderQueue.push(newOrder);
        cout << "Order placed successfully! Order ID: " << newOrder.orderId << endl;
    }
    
    void processOrder() {
        if (orderQueue.empty()) {
            cout << "No orders to process." << endl;
            return;
        }
        Order nextOrder = orderQueue.front();
        orderQueue.pop();
        deliveryQueue.push(nextOrder);
        cout << "Order ID " << nextOrder.orderId << " moved to delivery queue." << endl;
    }
    
    void deliverOrder() {
        if (deliveryQueue.empty()) {
            cout << "No orders for delivery." << endl;
            return;
        }
        Order nextDelivery = deliveryQueue.top();
        deliveryQueue.pop();
        cout << "Order ID " << nextDelivery.orderId << " (" << nextDelivery.foodItem << ") is being delivered to "
             << nextDelivery.customer.name << "." << endl;
    }
    
    void viewPendingOrders() {
        if (orderQueue.empty()) {
            cout << "No pending orders." << endl;
            return;
        }
        cout << "\nPending Orders:\n";
        cout << left << setw(10) << "ID" << setw(20) << "Customer" << setw(20) << "Restaurant"
             << setw(20) << "Dish" << setw(15) << "Delivery Time\n";
        cout << string(75, '-') << endl;
        queue<Order> tempQueue = orderQueue;
        while (!tempQueue.empty()) {
            Order order = tempQueue.front();
            tempQueue.pop();
            cout << left << setw(10) << order.orderId << setw(20) << order.customer.name
                 << setw(20) << order.restaurant.name << setw(20) << order.foodItem
                 << setw(15) << order.deliveryTime << " min\n";
        }
    }
    
    void viewDeliveryQueue() {
        if (deliveryQueue.empty()) {
            cout << "No orders in the delivery queue." << endl;
            return;
        }
        cout << "\nOrders Ready for Delivery:\n";
        cout << left << setw(10) << "ID" << setw(20) << "Customer" << setw(20) << "Restaurant"
             << setw(20) << "Dish" << setw(15) << "Delivery Time\n";
        cout << string(75, '-') << endl;
        priority_queue<Order> tempHeap = deliveryQueue;
        while (!tempHeap.empty()) {
            Order order = tempHeap.top();
            tempHeap.pop();
            cout << left << setw(10) << order.orderId << setw(20) << order.customer.name
                 << setw(20) << order.restaurant.name << setw(20) << order.foodItem
                 << setw(15) << order.deliveryTime << " min\n";
        }
    }
};

void menu() {
    OrderManager system;
    int choice;
    do {
        cout << "\n--- Food Delivery System ---\n";
        cout << "1. Place an order\n";
        cout << "2. Process the order\n";
        cout << "3. Deliver the order\n";
        cout << "4. View pending orders\n";
        cout << "5. View the delivery queue\n";
        cout << "6. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;
        switch (choice) {
            case 1: {
                string customerName, restaurantName, foodItem;
                int deliveryTime;
                cin.ignore();
                cout << "Enter customer name: ";
                getline(cin, customerName);
                cout << "Enter restaurant name: ";
                getline(cin, restaurantName);
                cout << "Enter dish: ";
                getline(cin, foodItem);
                cout << "Enter delivery time (in minutes): ";
                cin >> deliveryTime;
                Customer customer(customerName);
                Restaurant restaurant(restaurantName);
                system.placeOrder(customer, restaurant, foodItem, deliveryTime);
                break;
            }
            case 2:
                system.processOrder();
                break;
            case 3:
                system.deliverOrder();
                break;
            case 4:
                system.viewPendingOrders();
                break;
            case 5:
                system.viewDeliveryQueue();
                break;
            case 6:
                cout << "Exiting the system." << endl;
                break;
            default:
                cout << "Invalid choice. Try again." << endl;
        }
    } while (choice != 6);
}

int main() {
    menu();
    return 0;
}
